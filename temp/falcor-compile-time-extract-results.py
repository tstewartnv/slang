import os, sys, re, time, json, argparse
try:
    # Open file containing stdout of results
    with open(sys.argv[1], "rt", encoding="utf-16") as fp:
        data = fp.read()
    # Unique ID for the current test results. Format: YYYYmmddHHMMSS (YearMonthDayHourMinuteSecond)
    results_id = time.strftime(r"%Y%m%d%H%M%S", time.localtime()) 
    rtn_json = {}
    rtn_json[results_id] = {}
    pvc = re.findall(r"(?<=Time for program version creation )(\((glslang|slang)\): ([0-9]*\.[0-9][0-9][0-9]))", data)  # Program version creation
    pkc = re.findall(r"(?<=Time for program kernel creation )(\((glslang|slang)\): ([0-9]*\.[0-9][0-9][0-9]))", data)   # Program kernel creation
    fe = re.findall(r"(?<=Time for frontend execution:)([0-9]*\.[0-9][0-9][0-9])", data)                                # Frontend execution
    sg = re.findall(r"(?<=Time for spirv generation by )((glslang|slang): ([0-9]*\.[0-9][0-9][0-9]))", data)            # Spirv generation
    sc = re.findall(r"(?<=Time for compiling spirv generated by )((glslang|slang): ([0-9]*\.[0-9][0-9][0-9]))", data)   # Spirv compilation

    rtn_json[results_id]["program-version-creation"] = {pvc[0][1]: float(pvc[0][2]), pvc[1][1]: float(pvc[1][2])}
    rtn_json[results_id]["program-kernel-creation"] = {pkc[0][1]: float(pkc[0][2]), pkc[1][1]: float(pkc[1][2])}
    rtn_json[results_id]["frontend-execution"] = {"glslang": float(fe[0]), "slang": float(fe[1])}
    rtn_json[results_id]["spirv-generation"] = {sg[0][1]: float(sg[0][2]), sg[1][1]: float(sg[1][2])}
    rtn_json[results_id]["spirv-compilation"] = {sc[0][1]: float(sc[0][2]), sc[1][1]: float(sc[1][2])}

    with open(os.path.join(".", "temp", f"{results_id}_falcor-compile-time_nightly.json"), "wt", encoding="utf-8") as fp:
        json.dump(rtn_json, fp, indent=2)

    print(json.dumps(rtn_json, indent=2))
except:
    exit(1)